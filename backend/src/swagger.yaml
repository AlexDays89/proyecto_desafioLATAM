openapi: 3.0.0
info:
  title: API de Productos
  version: 1.0.0
  description: Documentación de la API de Productos
servers:
  - url: https://proyecto-desafiolatam.onrender.com/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Producto:
      type: object
      properties:
        id: { type: serial, example: 1 }
        name: { type: string, example: "Producto A" }
        price: { type: integer, example: 1000 }
        stock: { type: integer, example: 10 }
        category: { type: string, example: "Electrónica" }
        img: { type: string, example: "https://ejemplo.com/img.jpg" }
        description: { type: string, example: "Descripción del producto" }
    ProductoInput:
      type: object
      properties:
        name: { type: string, example: "Producto A" }
        price: { type: integer, example: 1000 }
        stock: { type: integer, example: 10 }
        category: { type: string, example: "Electrónica" }
        img: { type: string, example: "https://ejemplo.com/img.jpg" }
        description: { type: string, example: "Descripción del producto" }
      required: [name, price, stock, category, img]
    Usuario:
      type: object
      properties:
        id: { type: serial, example: 1 }
        username: { type: string, example: "usuario123" }
        mail: { type: string, example: "usuario@email.com" }
        rol: { type: string, example: "user" }
        nombre: { type: string, example: "Juan" }
        apellido: { type: string, example: "Pérez" }
        direccion: { type: string, example: "Calle 123" }
    UsuarioInput:
      type: object
      properties:
        username: { type: string, example: "usuario123" }
        mail: { type: string, example: "usuario@email.com" }
        password: { type: string, example: "123456" }
        rol: { type: string, example: "user" }
        nombre: { type: string, example: "Juan" }
        apellido: { type: string, example: "Pérez" }
        direccion: { type: string, example: "Calle 123" }
      required: [username, mail, password, nombre, apellido, direccion]
paths:
  /productos:
    get:
      summary: Obtiene todos los productos
      tags: [Productos]
      responses:
        200:
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
    post:
      summary: Crea un nuevo producto (requiere admin)
      tags: [Productos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoInput'
      responses:
        201:
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        401:
          description: No autorizado
  /productos/{id}:
    get:
      summary: Obtiene un producto por ID
      tags: [Productos]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del producto
      responses:
        200:
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        404:
          description: Producto no encontrado
    put:
      summary: Actualiza un producto existente (requiere admin)
      tags: [Productos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoInput'
      responses:
        200:
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        401:
          description: No autorizado
        404:
          description: Producto no encontrado
    delete:
      summary: Elimina un producto por ID (requiere admin)
      tags: [Productos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del producto
      responses:
        200:
          description: Producto eliminado
        401:
          description: No autorizado
        404:
          description: Producto no encontrado
  /usuarios/login:
    post:
      summary: Inicia sesión de usuario
      tags: [Usuarios]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                  example: usuario@email.com
                password:
                  type: string
                  example: 123456
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuario:
                    $ref: '#/components/schemas/Usuario'
                  token:
                    type: string
        401:
          description: Credenciales inválidas
  /usuarios/register:
    post:
      summary: Registra un nuevo usuario
      tags: [Usuarios]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        201:
          description: Registro exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuario:
                    $ref: '#/components/schemas/Usuario'
                  token:
                    type: string
        500:
          description: Error al registrar el usuario
  /usuarios/perfil:
    get:
      summary: Obtiene el perfil del usuario autenticado
      tags: [Usuarios]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Perfil del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        401:
          description: No autorizado
    put:
      summary: Actualiza el perfil del usuario autenticado
      tags: [Usuarios]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                apellido:
                  type: string
                direccion:
                  type: string
                mail:
                  type: string
      responses:
        200:
          description: Perfil actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        401:
          description: No autorizado
