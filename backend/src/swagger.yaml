openapi: 3.0.0
info:
  title: API de Productos
  version: 1.0.0
  description: Documentación de la API de Productos
servers:
  - url: https://proyecto-desafio-latam-rfqw.vercel.app/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Producto:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Producto A" }
        price: { type: integer, example: 1000 }
        stock: { type: integer, example: 10 }
        category: { type: string, example: "Electrónica" }
        img: { type: string, example: "https://ejemplo.com/img.jpg" }
        description: { type: string, example: "Descripción del producto" }
    ProductoInput:
      type: object
      properties:
        name: { type: string, example: "Producto A" }
        price: { type: integer, example: 1000 }
        stock: { type: integer, example: 10 }
        category: { type: string, example: "Electrónica" }
        img: { type: string, example: "https://ejemplo.com/img.jpg" }
        description: { type: string, example: "Descripción del producto" }
      required: [name, price, stock, category, img]
    Usuario:
      type: object
      properties:
        id: { type: integer, example: 1 }
        username: { type: string, example: "usuario123" }
        mail: { type: string, example: "usuario@email.com" }
        rol: { type: string, example: "user" }
        nombre: { type: string, example: "Juan" }
paths:
  /productos:
    get:
      summary: Obtener todos los productos
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
    post:
      summary: Crear un producto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoInput'
      responses:
        '201':
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
  /productos/{id}:
    get:
      summary: Obtener producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
    put:
      summary: Actualizar producto
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoInput'
      responses:
        '200':
          description: Producto actualizado
    delete:
      summary: Eliminar producto
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Producto eliminado
  /usuarios/login:
    post:
      summary: Login de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login exitoso
  /usuarios/register:
    post:
      summary: Registro de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuario registrado
  /usuarios/perfil:
    get:
      summary: Obtener perfil de usuario
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
    put:
      summary: Actualizar perfil de usuario
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                apellido:
                  type: string
                direccion:
                  type: string
                mail:
                  type: string
      responses:
        '200':
          description: Perfil actualizado
  /compras:
    post:
      summary: Crear una compra
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usuarioId:
                  type: integer
                productos:
                  type: array
                  items:
                    type: object
      responses:
        '201':
          description: Compra creada
  /compras/usuario/{id}:
    get:
      summary: Obtiene compras por usuario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compras del usuario
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /compras/{id}:
    get:
      summary: Obtiene items de una compra
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Items de la compra
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: ok
          content:
            text/plain:
              schema:
                type: string
          type: integer
      required: [nombre, descripcion, precio, stock]
    ProductoInput:
      type: object
      properties:
        nombre:
          type: string
        descripcion:
          type: string
        precio:
          type: number
        stock:
          type: integer
      required: [nombre, descripcion, precio, stock]
    Usuario:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        mail:
          type: string
        rol:
          type: string
        nombre:
          type: string
        apellido:
          type: string
        direccion:
          type: string
      required: [username, mail, rol, nombre, apellido, direccion]
    UsuarioInput:
      type: object
      properties:
        username:
          type: string
        mail:
          type: string
        password:
          type: string
        rol:
          type: string
        nombre:
          type: string
        apellido:
          type: string
        direccion:
          type: string
      required: [username, mail, password, nombre, apellido, direccion]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
